(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _cmpCategoryArticleSelector = require('./components/cmpCategoryArticleSelector');

var _cmpChatInterface = require('./components/cmpChatInterface');

(0, _cmpCategoryArticleSelector.cmpCategoryArticleSelector)();
(0, _cmpChatInterface.cmpChatInterface)();

},{"./components/cmpCategoryArticleSelector":2,"./components/cmpChatInterface":7}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.cmpCategoryArticleSelector = undefined;

var _getSelectedCategory = require('./cmpCategoryArticleSelector/getSelectedCategory');

var _getAllSelectedCategory = require('./cmpCategoryArticleSelector/getAllSelectedCategory');

var _showAllSelectedCategory = require('./cmpCategoryArticleSelector/showAllSelectedCategory');

var componentCategoryArticleSelector = document.querySelector("[data-component-name='cmpCategoryArticleSelector']");

var cmpCategoryArticleSelector = exports.cmpCategoryArticleSelector = function cmpCategoryArticleSelector() {

	var elementArticleSelectorItem = [].slice.call(document.querySelectorAll('.cmp-category-article-selector__article-selector-item')),
	    elementArticleItems = [].slice.call(document.querySelectorAll('.cmp-category-article-selector__article-list-item')),
	    currentViewArticleList = elementArticleItems,
	    elementArticleItems;

	if (componentCategoryArticleSelector) {
		(0, _getSelectedCategory.getSelectedCategory)(elementArticleSelectorItem, elementArticleItems);
		(0, _getAllSelectedCategory.getAllSelectedCategory)(elementArticleSelectorItem, currentViewArticleList, elementArticleItems);
		(0, _showAllSelectedCategory.showAllSelectedCategory)(currentViewArticleList);
	}
};

},{"./cmpCategoryArticleSelector/getAllSelectedCategory":3,"./cmpCategoryArticleSelector/getSelectedCategory":4,"./cmpCategoryArticleSelector/showAllSelectedCategory":5}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.getAllSelectedCategory = undefined;

var _showAllSelectedCategory = require('./showAllSelectedCategory');

var elementArticleShowAll = document.querySelector("button[data-load-all]");

var getAllSelectedCategory = exports.getAllSelectedCategory = function getAllSelectedCategory(elementArticleSelectorItem, currentViewArticleList, allArticles) {

	elementArticleShowAll.addEventListener('click', function (e) {
		e.preventDefault();
		allArticles = true;
		(0, _showAllSelectedCategory.showAllSelectedCategory)(currentViewArticleList, allArticles);
	});
};

},{"./showAllSelectedCategory":5}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.getSelectedCategory = undefined;

var _showSelectedCategory = require('./showSelectedCategory');

var _showAllSelectedCategory = require('./showAllSelectedCategory');

var getSelectedCategory = exports.getSelectedCategory = function getSelectedCategory(elementArticleSelectorItem, elementArticleItems) {

	var allArticles = false,
	    currentSelectedCategory,
	    currentViewArticleList;

	for (var i = 0; i < elementArticleSelectorItem.length; i++) {

		elementArticleSelectorItem[i].addEventListener('click', function (e) {
			e.preventDefault();
			currentSelectedCategory = e.currentTarget.getAttribute('data-category-type');
			currentViewArticleList = (0, _showSelectedCategory.showSelectedCategory)(currentSelectedCategory, elementArticleItems);
			(0, _showAllSelectedCategory.showAllSelectedCategory)(currentViewArticleList);
		});
	}
};

},{"./showAllSelectedCategory":5,"./showSelectedCategory":6}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
var showAllSelectedCategory = exports.showAllSelectedCategory = function showAllSelectedCategory(currentViewArticleList, allArticles) {

	if (allArticles) {
		currentViewArticleList.forEach(function (article, i) {
			article.style.display = "block";
		});
		// if (currentViewArticleList.length > 6) {
		// 	filterLoad.style.display = "none";
		// }
	} else if (!allArticles) {
		currentViewArticleList.forEach(function (article, i) {
			if (i > 5) {
				article.style.display = "none";
			}
		});
		// if (currentViewArticleList.length > 6) {
		// 	filterLoad.style.display = "block";
		// }
	}
};

},{}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
var showSelectedCategory = exports.showSelectedCategory = function showSelectedCategory(currentSelectedCategory, elementArticleItems) {

	if (currentSelectedCategory === 'All') {
		return elementArticleItems.map(function (elementArticleItems) {
			elementArticleItems.style.display = 'block';
			return elementArticleItems;
		});
	} else {
		return elementArticleItems.map(function (elementArticleItems) {
			elementArticleItems.style.display = 'none';

			return elementArticleItems;
		}).filter(function (elementArticleItems) {

			return elementArticleItems.getAttribute('data-category-type') === currentSelectedCategory;
		}).map(function (elementArticleItems) {

			elementArticleItems.style.display = 'block';
			return elementArticleItems;
		});
	}
};

},{}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.cmpChatInterface = undefined;

var _getSubmittedChat = require("./cmpChatInterface/getSubmittedChat");

var componentChatInterface = document.querySelector("[data-component-name='cmpChatInterface']");

var cmpChatInterface = exports.cmpChatInterface = function cmpChatInterface() {

	var elementSubmitButton = document.querySelector("textarea");

	if (componentChatInterface) {
		(0, _getSubmittedChat.getSubmittedChat)(elementSubmitButton);
	}
};

},{"./cmpChatInterface/getSubmittedChat":8}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.getSubmittedChat = undefined;

var _showSubmittedChat = require('./showSubmittedChat');

var getSubmittedChat = exports.getSubmittedChat = function getSubmittedChat(elementSubmitButton) {

	elementSubmitButton.addEventListener('keyup', function (e) {

		if (e.keyCode === 13) {

			var submittedChat = document.querySelector("[data-new-chat]"),
			    submittedChatMessage = document.querySelector("[data-new-chat]").value;

			submittedChat.value = "";
			(0, _showSubmittedChat.showSubmittedChat)(submittedChatMessage);
		}
	});
};

},{"./showSubmittedChat":10}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var showBotChat = exports.showBotChat = function showBotChat() {

  var chatList = document.querySelector("[data-chat-list]"),
      newChatListItem = document.createElement("li"),
      newChatListSpan = document.createElement("span");

  newChatListItem.classList.add("cmp-chat-interface__dialogue-list-item");
  newChatListItem.classList.add("is-bot");
  newChatListSpan.classList.add("cmp-chat-interface__dialogue-list-item-chat");

  newChatListSpan.innerText = "What?";

  newChatListItem.appendChild(newChatListSpan);

  chatList.appendChild(newChatListItem);
};

},{}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.showSubmittedChat = undefined;

var _showBotChat = require("./showBotChat");

var showSubmittedChat = exports.showSubmittedChat = function showSubmittedChat(submittedChat) {

  var chatList = document.querySelector("[data-chat-list]"),
      newChatListItem = document.createElement("li"),
      newChatListSpan = document.createElement("span");

  newChatListItem.classList.add("cmp-chat-interface__dialogue-list-item");
  newChatListItem.classList.add("is-user");
  newChatListSpan.classList.add("cmp-chat-interface__dialogue-list-item-chat");

  newChatListSpan.innerText = submittedChat;
  newChatListItem.appendChild(newChatListSpan);
  chatList.appendChild(newChatListItem);

  (0, _showBotChat.showBotChat)();
};

},{"./showBotChat":9}]},{},[1]);
